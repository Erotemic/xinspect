global:
    env:
        - secure: "MxfwGJxfxWPHHk4qNwNyaK9YXRLdW0sV3ct5b3dZ3kDoV6uKWC5Xq7tZkG96v4GQwnajJdKBHXFHDVJwDSKwUBEI8ZOdRFAgG73/FHjo8OU01y42EuAlBoKqJhO+uHY6nybipQuNfbLOeuH8/qufF/rpL9S59ZajbV5ZONdODDmgUCafah1tOyZpixwM09380kJVh99iAAfsZ9rNDHOzOmFED1KZ9y0k4G08dvlR3+WYNnJZyyUnLHMC1fXa3ekgEw5zGCxCE8hT8QC24D/nEVUKrB08nwq7AkoKeeGqNznF9bTcEdhap5ntK6oubNeI2UxZWdJJ1lrFeMRNplPfB6swsjd6uxNysZqQdzvS6N6DLCDSZ4MJaShv+jkP3FpQeiC5dTN36+DU+j27ccFlOkSxz7ivv+rYyEMesDIb5J8OZB/oEuoAby8zStZ7v4BVZJMK+RGACdlqw66a6oYh7uFV4Ba2uUq6SlSlBwAuB1tPBEz92SxlsP9CMSSVWjoW8KD2UpA0mMmY0W6YRataxAnkx37YZf3h1FeZwmYS9WMgEDWrBwqH3rHP/njwNJRLMsdTk3nTWGkKwiwzfOeel4znZNQYmU2/kWXiNY6c+zRRXR+Q3xCpAKGUM4l9sNzaDWWptQY1poZIl3SJFAimCK1ELR5YNN/ECyOquPvOwZA="

        - secure: "FLjyol33MBBMDXzjM5/mYZP+VOl3OYF3L4USUJ3Tnkp0JjUzcgi34frPlvoyDokqJFvui0B7luaSYpbKZ4MLZGOpZc+L9a3cvagohpWBulHtN0o/YZa9W4LXofsDgSWr0S1C/UrguKMpaYoIguDTPXeMcCAqYiu/nIixhD4BWZKnk9/YDBxJQZvoEaJTuVh//X6IWLUGIEyYfKU+7UP+aRLXpn1JBPuk+DUtkr81udjqJsmJsAlUZBe8GICAvfoF5GvVTDtO2zbWSZoJkLDH905c/ONTTsTy7PqgEjoOd22toFT1SPYvnptBG3LEHTqpdnXzRUyBEVjmnMeqMfq4PvxaGQGMwVizsDqks/88uXVdUEiYVZkg+uTv7xV7etiDKQRsYEvNXM9R6XLDwikIpbYYiRzGYdAydECwW49ukDdO1kzwmZ3eptsrWyYhte7haP1kl6JBWe8cZjlNzVaoljm11PJILPGRUReH942Uk2exHl3q+K3yrXFbjcOarSV8UnvLuQc4xkntCptm3ieERx2Ce57CBktpUelH/LcE9r6fxBTNTdmTqQ3xUzLeUVxiInjLvbQ7y4HC7Rtvswh0xjv+hB5Acj/NOgxo1QOeVA6f76oYs4OEgFbePrmph364O0r2G84M3PBFb+bYmgIDn8vJ6woO7e1GeD6T8cCWs3I="

        - secure: "SbAKyeQP2i894ozkam8QzTmU8u7bDkKdEiant/RfoO2iV72em8boIBLk19yL9GVpGxTEomMflpd5LQIgVaDIClWGSWd+VOiFuyOaf+WBgw1N1DLiRQNTSQTrjazLwubhOg/6+ur4d7T7wfChWPixXXRxpfg5JBPfYbmhU3tO8nf/dEcmLhHuI8Ln8JEqRcnM2qM2H5D/FZvMGDqXyZNhbju8XdvE3OEGzJznP+pUiXZ0lhbpjToXTCPUMo3RrxrTkxYJsX/nQiD25FPXLV9FOLQCWRKrynbEwwprpgQTGZ8kMx3ugh6KMGrfkMC1Y5FrDsORvw7QTxIJo0HgE9/d+x5MOr2Z+cedhhCg4oJIi40C/jQE/80vxUylgxqDOQjZq1MxBiRiXBOnGtNJr60vBH7XduIUcYVI/Z0iPVOWLuXKTaiGsgI5HJWXL8eE8HEW4Ah0kPCqGmrCuQTiCZl5Znm1ibcp1Fls4Ar5Qvldg/oKS+ADyQa5Zt1QU39MU4Ep/xXhQ7/l85V1fKoR0Y/HSADDzTN6fETnhpHLuLIKcrHHFqRAkRjeztn7AYxSygwxXUSTu7aI+/2C53fJQKunozkDsIwturi+GnoXb8zVZgIQo/83jFMY09luBPLMmaoKnSsy1Vv1HP1w8aH9EQOcm66Gj+VslpToTuyacTZPL0A="

language: python
sudo: false

cache:
  apt: true
  directories:
  - $HOME/.cache/pip
  - $HOME/download
python:
  - "2.7"
  - "3.4"
  - "3.5"
  - "3.6"
before_install:
  - pip install pip -U
  - pip install -r requirements.txt -U
install:
  - travis_retry pip install -e .
script: 
  #- travis_wait ./run_tests.py
  #- travis_wait python run_tests.py
  - travis_wait pytest --cov-config .coveragerc --cov-report html --xdoc --cov=xinspect xinspect

after_success: 
    - codecov 
    - gpg --version
    - gpg2 --version
    - export GPG_EXECUTABLE=gpg2
    - openssl version
    - | 
        __heredoc__='''
        # Load or generate secrets
        source $(secret_loader.sh)
        echo $TRAVIS_SECRET
        echo $TWINE_USERNAME

        # encrypt relevant travis variables
        travis encrypt TRAVIS_SECRET=$TRAVIS_SECRET
        travis encrypt TWINE_PASSWORD=$TWINE_PASSWORD  
        travis encrypt TWINE_USERNAME=$TWINE_USERNAME 

        # HOW TO ENCRYPT YOUR SECRET GPG KEY
        IDENTIFIER="travis-ci-Erotemic"
        KEYID=$(gpg --list-keys --keyid-format LONG "$IDENTIFIER" | head -n 2 | tail -n 1 | awk '{print $1}' | tail -c 9)
        echo "KEYID = $KEYID"

        # Export plaintext gpg public keys, private keys, and trust info
        mkdir -p dev
        gpg --armor --export-secret-keys $KEYID > dev/travis_secret_gpg_key.pgp
        gpg --armor --export $KEYID > dev/travis_public_gpg_key.pgp
        gpg --export-ownertrust > dev/gpg_owner_trust

        # Encrypt gpg keys and trust with travis secret
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_public_gpg_key.pgp > dev/travis_public_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/travis_secret_gpg_key.pgp > dev/travis_secret_gpg_key.pgp.enc
        TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -e -a -in dev/gpg_owner_trust > dev/gpg_owner_trust.enc

        source $(secret_unloader.sh)

        # Look at what we did, clean up, and add it to git
        ls dev/*.enc
        rm dev/gpg_owner_trust dev/*.pgp
        git status
        git add dev/*.enc

        '''  # <hack vim "regex" parser> '
    # Decrypt and import GPG Keys / trust
    - $GPG_EXECUTABLE --version
    - openssl version
    - $GPG_EXECUTABLE --list-keys
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_secret_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/travis_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
    - TSP=$TRAVIS_SECRET openssl enc -aes-256-cbc -md MD5 -pass env:TSP -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
    - $GPG_EXECUTABLE --list-keys
    - |
        pip install twine
        if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
          pip install six pyopenssl ndg-httpsclient pyasn1 -U --user
          pip install requests[security] twine --user
        elfi
        if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
          pip install six twine
          pip install --upgrade pyOpenSSL
        fi
    # Package and publish to pypi (if on release)
    - |
        echo "TRAVIS_BRANCH = $TRAVIS_BRANCH"
        if [[ "$TRAVIS_BRANCH" == "release" ]]; then
            # use set +x to log all intermediate commands 
            set +x
            export CURRENT_BRANCH=$TRAVIS_BRANCH
            # TODO: reliable and secure gpg keys
            # Relies on a specific environmenmt being available 
            GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=yes ./publish.sh
            set -x
        else
            GPG_KEYID=D297D757 CURRENT_BRANCH=$TRAVIS_BRANCH TWINE_PASSWORD=$TWINE_PASSWORD TWINE_USERNAME=$TWINE_USERNAME GPG_EXECUTABLE=$GPG_EXECUTABLE USE_GPG=True DEPLOY_BRANCH=release TAG_AND_UPLOAD=no ./publish.sh
        fi

cache: 
    apt: true
    directories:
        - $HOME/.pip-cache
